generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model SyncState {
  id                String    @id @default(cuid())
  type              String
  objectType        String?
  object            String?
  entityId          String?
  maxLastModifiedAt DateTime?

  @@unique([type, objectType, object])
  @@unique([type, entityId])
  @@map("sync_states")
}

model Opportunity {
  id                        String                 @id @default(cuid())
  providerName              String
  customerId                String
  originalId                String
  name                      String?
  amount                    Int?
  lastModifiedAt            DateTime
  opportunityToContactLinks OpportunityToContact[]

  @@unique([providerName, customerId, originalId])
  @@map("opportunities")
}

model Contact {
  id                        String                 @id @default(cuid())
  providerName              String
  customerId                String
  originalId                String
  firstName                 String?
  lastName                  String?
  email                     String?
  phone                     String?
  lastModifiedAt            DateTime
  opportunityToContactLinks OpportunityToContact[]

  @@unique([providerName, customerId, originalId])
  @@map("contacts")
}

model OpportunityToContact {
  id                    String       @id @default(cuid())
  providerName          String
  customerId            String
  originalOpportunityId String
  originalContactId     String
  opportunityId         String?
  opportunity           Opportunity? @relation(fields: [opportunityId], references: [id])
  contactId             String?
  contact               Contact?     @relation(fields: [contactId], references: [id])
  lastModifiedAt        DateTime

  @@unique([providerName, customerId, originalOpportunityId, originalContactId])
  @@unique([opportunityId, contactId])
  @@map("opportunity_to_contact_links")
}

model SupaglueHubSpotDeal {
  supaglue_application_id   String   @map("_supaglue_application_id")
  supaglue_provider_name    String   @map("_supaglue_provider_name")
  supaglue_customer_id      String   @map("_supaglue_customer_id")
  supaglue_id               String   @map("_supaglue_id")
  supaglue_emitted_at       DateTime @map("_supaglue_emitted_at")
  supaglue_last_modified_at DateTime @map("_supaglue_last_modified_at")
  supaglue_is_deleted       Boolean  @map("_supaglue_is_deleted")
  supaglue_raw_data         Json     @map("_supaglue_raw_data")
  supaglue_mapped_data      Json     @map("_supaglue_mapped_data")

  @@id([supaglue_application_id, supaglue_provider_name, supaglue_customer_id, supaglue_id])
  @@map("hubspot_deal")
}

model SupaglueHubSpotContact {
  supaglue_application_id   String   @map("_supaglue_application_id")
  supaglue_provider_name    String   @map("_supaglue_provider_name")
  supaglue_customer_id      String   @map("_supaglue_customer_id")
  supaglue_id               String   @map("_supaglue_id")
  supaglue_emitted_at       DateTime @map("_supaglue_emitted_at")
  supaglue_last_modified_at DateTime @map("_supaglue_last_modified_at")
  supaglue_is_deleted       Boolean  @map("_supaglue_is_deleted")
  supaglue_raw_data         Json     @map("_supaglue_raw_data")
  supaglue_mapped_data      Json     @map("_supaglue_mapped_data")

  @@id([supaglue_application_id, supaglue_provider_name, supaglue_customer_id, supaglue_id])
  @@map("hubspot_contact")
}
